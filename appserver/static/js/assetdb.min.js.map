{"version":3,"sources":["src/assetdb.js"],"names":["require","_","$","mvc","SearchManager","Modal","TextInput","RadioInput","SpinnerInput","MultiSelectInput","$el","d","ENDPOINT_BASE","SERVICE","createService","getConf","endpoint","path","get","err","results","promise","setConf","data","post","editAddField","_field$content","_field$content2","_field$content3","_field$content4","_field$content5","_field$content6","_field$content7","_field$content8","_field$content9","_field$content10","field","arguments","length","undefined","fieldNameInput","id","label","editable","name","value","keyFieldInput","choices","content","key_field","help","caseSensitiveInput","case_sensitive","ignoreValuesInput","ignore_values","fillnullInput","fillnull","typeInput","type","parseInt","disable","mergeMethodInput","merge_method","mergeOrderInput","merge_order","spinnerInput","max_values","evalExpInput","eval_expression","$form","append","getInput","getValue","hide","concat","show","mergeMethod","$input","on","e","setValue","enable","editAddModal","wide","title","primaryButton","onRemove","Components","getInstance","getId","dispose","onPrimaryBtnClick","_this","this","isEditable","test","setError","when","done","buildTables","setBody","deleteField","deleteModal","_this2","deferred","del","resolve","delConf","$body","html","fields","JSON","parse","entry","$container","forEach","console","log","_field$content11","lookups","split","lookup","$tr","isKey","caseSensitive","$dl","next","find","toggle","toggleClass","fieldSplit","coalesce","stats","evalExp","keys","table","ignoreValues","maxValues","push","ignoreValuesMerge","map","join","mergeOrderArray","statsMerge","postEvalMerge","search","k"],"mappings":"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","sourcesContent":["//# sourceURL=asset_base.js\n\nrequire([\n\t'underscore',\n\t'jquery',\n\t'splunkjs/mvc',\n\t'splunkjs/mvc/searchmanager',\n\t'/static/app/assetdb/js/modal.min.js',\n\t'/static/app/assetdb/js/textInput.min.js',\n\t'/static/app/assetdb/js/radioInput.min.js',\n\t'/static/app/assetdb/js/spinnerInput.min.js',\n\t'/static/app/assetdb/js/multiselectInput.min.js',\n\t'splunkjs/mvc/simplexml/ready!',\n], function (_, $, mvc, SearchManager, Modal, TextInput, RadioInput, SpinnerInput, MultiSelectInput) {\n\t$el = $('#ab_config');\n\tconst ENDPOINT_BASE = '/servicesNS/nobody/assetdb/configs/';\n\tconst SERVICE = mvc.createService();\n\n\tfunction getConf(endpoint) {\n\t\tlet path = ENDPOINT_BASE + endpoint;\n\t\tlet deferred = SERVICE.get(path, {}, function (err, results) {});\n\t\treturn deferred.promise();\n\t}\n\n\tfunction setConf(endpoint, data) {\n\t\tlet path = ENDPOINT_BASE + endpoint;\n\t\tlet deferred = SERVICE.post(path, data, function (err, results) {});\n\t\treturn deferred.promise();\n\t}\n\n\tfunction delConf(endpoint) {\n\t\tlet path = ENDPOINT_BASE + endpoint;\n\t\tlet deferred = SERVICE.del(path, function (err, results) {\n\t\t\tdeferred.resolve(results);\n\t\t});\n\t\treturn deferred.promise();\n\t}\n\n\tfunction editAddField(field = {}) {\n\t\tlet fieldNameInput = new TextInput({\n\t\t\tid: 'inputFieldName',\n\t\t\tlabel: 'Field Name',\n\t\t\teditable: field?.name ? false : true,\n\t\t\tvalue: field?.name || '',\n\t\t});\n\n\t\tlet keyFieldInput = new RadioInput({\n\t\t\tid: 'inputKeyField',\n\t\t\tlabel: 'Key Field',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Yes', value: 1 },\n\t\t\t\t{ label: 'No', value: 0 },\n\t\t\t],\n\t\t\tvalue: field?.content?.key_field || 0,\n\t\t\thelp: 'Key fields define a unique asset',\n\t\t});\n\n\t\tlet caseSensitiveInput = new RadioInput({\n\t\t\tid: 'inputCaseSensitive',\n\t\t\tlabel: 'Case Sensitive',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Yes', value: 1 },\n\t\t\t\t{ label: 'No', value: 0 },\n\t\t\t],\n\t\t\tvalue: field?.content?.case_sensitive || 0,\n\t\t\thelp: 'If No, field values are converted to lowercase',\n\t\t});\n\n\t\tlet ignoreValuesInput = new TextInput({\n\t\t\tid: 'inputIgnoreValues',\n\t\t\tlabel: 'Ignore Values',\n\t\t\tvalue: field?.content?.ignore_values || '',\n\t\t\thelp: '[Optional] A comma separated list of values to ignore',\n\t\t});\n\n\t\tlet fillnullInput = new TextInput({\n\t\t\tid: 'inputFillnull',\n\t\t\tlabel: 'Fill Null',\n\t\t\tvalue: field?.content?.fillnull || '',\n\t\t\thelp: '[Optional] Fill null entries with a static value',\n\t\t});\n\n\t\tlet typeInput = new RadioInput({\n\t\t\tid: 'inputType',\n\t\t\tlabel: 'Type',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Single', value: 'single' },\n\t\t\t\t{ label: 'Multivalue', value: 'multivalue' },\n\t\t\t\t{ label: 'Eval', value: 'eval' },\n\t\t\t],\n\t\t\tvalue: field?.content?.type || 'single',\n\t\t\thelp: 'Use a single value, keep all unique entries as a multivalue, or use an eval expression to define this field',\n\t\t});\n\n\t\tif (parseInt(field?.content?.key_field)) typeInput.disable();\n\n\t\tlet mergeMethodInput = new RadioInput({\n\t\t\tid: 'inputMergeMethod',\n\t\t\tlabel: 'Merge Method',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Latest', value: 'latest' },\n\t\t\t\t{ label: 'Coalesce', value: 'coalesce' },\n\t\t\t],\n\t\t\tvalue: field?.content?.merge_method || 'latest',\n\t\t\thelp: 'Either take the most recent value or define a precedence based on the source data',\n\t\t});\n\n\t\tlet mergeOrderInput = new MultiSelectInput({\n\t\t\tid: 'inputMergeOrder',\n\t\t\tlabel: 'Merge Order',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'test1', value: 'test1' },\n\t\t\t\t{ label: 'test2', value: 'test2' },\n\t\t\t\t{ label: 'test3', value: 'test3' },\n\t\t\t],\n\t\t\tvalue: field?.content?.merge_order || [],\n\t\t\thelp: '[Optional] Define the precedence of the source data; if no precendence is provided, a random order is used',\n\t\t});\n\n\t\tlet spinnerInput = new SpinnerInput({\n\t\t\tid: 'inputMaxValues',\n\t\t\tlabel: 'Max Values',\n\t\t\tvalue: field?.content?.max_values || 10,\n\t\t\thelp: 'The maximum number of values to store as a multivalue',\n\t\t});\n\n\t\tlet evalExpInput = new TextInput({\n\t\t\tid: 'inputEvalExp',\n\t\t\tlabel: 'Eval Expression',\n\t\t\tvalue: field?.content?.eval_expression || '',\n\t\t\thelp: 'An SPL eval expression, example: replace(field1, \"[^w]\", \"\")',\n\t\t});\n\n\t\t$form = $(`\n            <div class=\"form-horizontal\">\n                <div class=\"input-group-base\"></div>\n                <div class=\"input-group-toggle input-group-single\"></div>\n                <div class=\"input-group-toggle input-group-multivalue\"></div>\n                <div class=\"input-group-toggle input-group-eval\"></div>\n            </div>`);\n\n\t\t$('.input-group-base', $form)\n\t\t\t.append(fieldNameInput.getInput())\n\t\t\t.append(keyFieldInput.getInput())\n\t\t\t.append(caseSensitiveInput.getInput())\n\t\t\t.append(ignoreValuesInput.getInput())\n\t\t\t.append(fillnullInput.getInput())\n\t\t\t.append(typeInput.getInput());\n\n\t\t$('.input-group-single', $form).append(mergeMethodInput.getInput()).append(mergeOrderInput.getInput());\n\t\t$('.input-group-multivalue', $form).append(spinnerInput.getInput());\n\t\t$('.input-group-eval', $form).append(evalExpInput.getInput());\n\n\t\tlet type = typeInput.getValue();\n\t\t$('.input-group-toggle', $form).hide();\n\t\t$(`.input-group-${type}`, $form).show();\n\n\t\tlet mergeMethod = mergeMethodInput.getValue();\n\t\tlet $input = mergeOrderInput.getInput();\n\t\tmergeMethod == 'latest' ? $input.hide() : $input.show();\n\n\t\tkeyFieldInput.getInput().on('change', function (e, data) {\n\t\t\tif (data.value == '1') {\n\t\t\t\ttypeInput.setValue('single');\n\t\t\t\ttypeInput.disable();\n\t\t\t} else {\n\t\t\t\ttypeInput.enable();\n\t\t\t}\n\t\t});\n\n\t\ttypeInput.getInput().on('change', function (e, data) {\n\t\t\t$('.input-group-toggle', $form).hide();\n\t\t\t$(`.input-group-${data.value}`, $form).show();\n\t\t});\n\n\t\tmergeMethodInput.getInput().on('change', function (e, data) {\n\t\t\tlet $input = mergeOrderInput.getInput();\n\t\t\tdata.value == 'latest' ? $input.hide() : $input.show();\n\t\t});\n\n\t\tlet editAddModal = new Modal({\n\t\t\twide: true,\n\t\t\ttitle: field ? 'Edit Field' : 'Add Field',\n\t\t\tprimaryButton: 'Save',\n\t\t\tonRemove: function () {\n\t\t\t\tmvc.Components.getInstance(mergeOrderInput.getId()).dispose();\n\t\t\t},\n\t\t\tonPrimaryBtnClick: function () {\n\t\t\t\tif (fieldNameInput.isEditable()) {\n\t\t\t\t\tlet pattern = /^\\w+$/;\n\t\t\t\t\tif (!pattern.test(fieldNameInput.getValue())) {\n\t\t\t\t\t\tfieldNameInput.setError('Field name can only use alphanumeric characters and underscores');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet endpoint = 'conf-assetdb/';\n\n\t\t\t\tlet data = {\n\t\t\t\t\tkey_field: keyFieldInput.getValue(),\n\t\t\t\t\tcase_sensitive: caseSensitiveInput.getValue(),\n\t\t\t\t\tignore_values: ignoreValuesInput.getValue(),\n\t\t\t\t\tfillnull: fillnullInput.getValue(),\n\t\t\t\t\ttype: typeInput.getValue(),\n\t\t\t\t\tmerge_method: mergeMethodInput.getValue(),\n\t\t\t\t\tmerge_order: mergeOrderInput.getValue(),\n\t\t\t\t\tmax_values: spinnerInput.getValue() || 2,\n\t\t\t\t\teval_expression: evalExpInput.getValue(),\n\t\t\t\t};\n\n\t\t\t\tif (fieldNameInput.isEditable()) {\n\t\t\t\t\tdata.name = fieldNameInput.getValue();\n\t\t\t\t} else {\n\t\t\t\t\tendpoint += fieldNameInput.getValue();\n\t\t\t\t}\n\n\t\t\t\tlet d = setConf(endpoint, data);\n\t\t\t\t$.when(d).done(() => {\n\t\t\t\t\tbuildTables();\n\t\t\t\t\tthis.hide();\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\teditAddModal.setBody($form);\n\t\teditAddModal.show();\n\t}\n\n\tfunction deleteField(name) {\n\t\tlet deleteModal = new Modal({\n\t\t\twide: false,\n\t\t\ttitle: 'Delete Field',\n\t\t\tprimaryButton: 'Delete',\n\t\t\tonPrimaryBtnClick: function () {\n\t\t\t\tlet endpoint = 'conf-assetdb/' + name;\n\t\t\t\tlet d = delConf(endpoint);\n\t\t\t\t$.when(d).done(() => {\n\t\t\t\t\tbuildTables();\n\t\t\t\t\tthis.hide();\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\tlet $body = $(`<div>Are you sure you want to delete field <i>${name}</i>?</div>`);\n\t\tdeleteModal.setBody($body);\n\t\tdeleteModal.show();\n\t}\n\n\tfunction buildTables() {\n\t\t$el.html('');\n\n\t\tlet d = getConf('conf-assetdb');\n\n\t\t$.when(d).done((data) => {\n\t\t\tlet fields = JSON.parse(data).entry;\n\n\t\t\tlet $container = $(`\n\t\t\t\t<div class=\"grid-container\">\n\t\t\t\t\t<div class=\"grid-col grid-col-1\">\n\t\t\t\t\t\t<a href=\"#\" class=\"btn btn-primary btn-add-field\">Add Lookup</a>\n\t\t\t\t\t\t<table class=\"lookups-table table table-chrome table-row-expanding table-hover\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Lookup</th>\n\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody></tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"grid-col grid-col-2\">\n\t\t\t\t\t\t<a href=\"#\" class=\"btn btn-primary btn-add-field\">Add Field</a>\n\t\t\t\t\t\t<table class=\"fields-table table table-chrome table-row-expanding table-hover\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th data-key=\"\" class=\"col-info\"><i class=\"icon-info\"></i></th>\n\t\t\t\t\t\t\t\t\t<th>Field</th>\n\t\t\t\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t\t\t\t<th>Action</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody></tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`);\n\n\t\t\t$('.btn-add-field', $container).on('click', () => editAddField());\n\n\t\t\tfields.forEach(function (field) {\n\t\t\t\tconsole.log(field);\n\t\t\t\tif (field.name == 'adb_lookups') {\n\t\t\t\t\tif (!field?.content?.lookups) return;\n\n\t\t\t\t\tlet lookups = field.content.lookups.split(',');\n\t\t\t\t\tlookups.forEach(function (lookup) {\n\t\t\t\t\t\tlet $tr = $(`\n\t\t\t\t\t\t\t<tr data-name=\"${lookup}\">\n\t\t\t\t\t\t\t\t<td>${lookup}</td>\n\t\t\t\t\t\t\t\t<td><a class=\"adb-field-delete\" href=\"#\">Delete</a></td>'}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t`);\n\t\t\t\t\t\t$('.lookups-table tbody', $container).append($tr);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlet isKey = parseInt(field.content.key_field);\n\t\t\t\t\tlet caseSensitive = parseInt(field.content.case_sensitive);\n\n\t\t\t\t\tlet $tr = $(`\n\t\t\t\t\t\t<tr data-name=\"${field.name}\">\n\t\t\t\t\t\t\t<td class=\"expands\"><a href=\"#\"><i class=\"icon-triangle-down-small\"></i></a></td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<span>${field.name}</span>${isKey ? '<span class=\"key-tag\">Key</span>' : ''}\n\t\t\t\t\t\t\t\t<div class=\"more-info\" style=\"display: none\">\n\t\t\t\t\t\t\t\t\t<dl class=\"list-dotted\">\n\t\t\t\t\t\t\t\t\t\t<dt>Key Field</dt><dd>${isKey ? 'Yes' : 'No'}</dd>\n\t\t\t\t\t\t\t\t\t\t<dt>Case Sensitive</dt><dd>${caseSensitive ? 'Yes' : 'No'}</dd>\n\t\t\t\t\t\t\t\t\t\t<dt>Ignore Values</dt><dd>${field.content.ignore_values || 'N/A'}</dd>\n\t\t\t\t\t\t\t\t\t\t<dt>Fill Null</dt><dd>${field.content.fillnull || 'N/A'}</dd>\n\t\t\t\t\t\t\t\t\t</dl>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>${field.content.type}</td>\n\t\t\t\t\t\t\t<td><a class=\"adb-field-edit\" href=\"#\">Edit</a> | <a class=\"adb-field-delete\" href=\"#\">Delete</a></td>'}\n\t\t\t\t\t\t</tr>`);\n\n\t\t\t\t\tlet $dl = $('dl', $tr);\n\t\t\t\t\tif (field.content.type == 'single') {\n\t\t\t\t\t\t$dl.append(`<dt>Merge Method</dt><dd>${field.content.merge_method}</dd>`);\n\t\t\t\t\t\tif (field.content.merge_method == 'coalesce') {\n\t\t\t\t\t\t\t$dl.append(`<dt>Merge Order</dt><dd>${field.content.merge_order}</dd>`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (field.content.type == 'multivalue') {\n\t\t\t\t\t\t$dl.append(`<dt>Max Values</dt><dd>${field.content.max_values}</dd>`);\n\t\t\t\t\t} else if (field.content.type == 'eval') {\n\t\t\t\t\t\t$dl.append(`<dt>Eval Expression</dt><dd>${field.content.eval_expression}</dd>`);\n\t\t\t\t\t}\n\n\t\t\t\t\t$('td.expands', $tr).on('click', function () {\n\t\t\t\t\t\t$(this).next().find('.more-info').toggle();\n\t\t\t\t\t\t$('i', this).toggleClass('icon-triangle-right-small').toggleClass('icon-triangle-down-small');\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\n\t\t\t\t\t$('.adb-field-edit', $tr).on('click', () => editAddField(field));\n\t\t\t\t\t$('.adb-field-delete', $tr).on('click', () => deleteField(field.name));\n\n\t\t\t\t\t$('.fields-table tbody', $container).append($tr);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$el.append($container);\n\t\t});\n\t}\n\n\tfunction makeMergeSearch() {\n\t\tlet d = getConf('conf-assetdb');\n\n\t\t$.when(d).done((data) => {\n\t\t\tlet fields = JSON.parse(data).entry;\n\t\t\tlet fieldSplit = [];\n\t\t\tlet coalesce = [];\n\t\t\tlet stats = [];\n\t\t\tlet evalExp = [];\n\t\t\tlet keys = [];\n\t\t\tlet table = [];\n\t\t\tlet fillnull = {};\n\t\t\tlet ignoreValues = [];\n\t\t\tlet caseSensitive = [];\n\t\t\tlet maxValues = [];\n\n\t\t\tfields.forEach(function (field) {\n\t\t\t\tif (parseInt(field.content.key_field)) keys.push(field.name);\n\n\t\t\t\tif (field.content.ignore_values) {\n\t\t\t\t\tlet ignoreValuesArray = field.content.ignore_values.split(',');\n\t\t\t\t\tlet ignoreValuesMerge = ignoreValuesArray.map((value) => {\n\t\t\t\t\t\treturn `\"${value}\"`;\n\t\t\t\t\t});\n\t\t\t\t\tignoreValues.push(`${field.name} = if(in(${field.name}, ${ignoreValuesMerge.join(', ')}), null(), ${field.name})`);\n\t\t\t\t}\n\n\t\t\t\tif (field.content.fillnull) {\n\t\t\t\t\tlet value = field.content.fillnull;\n\t\t\t\t\tif (value in fillnull) fillnull[value].push(field.name);\n\t\t\t\t\telse fillnull[value] = [field.name];\n\t\t\t\t}\n\n\t\t\t\tif (!parseInt(field.content.case_sensitive)) {\n\t\t\t\t\tcaseSensitive.push(`${field.name} = lower(${field.name})`);\n\t\t\t\t}\n\n\t\t\t\tif (field.content.type == 'single') {\n\t\t\t\t\tif (field.content.merge_method == 'latest') {\n\t\t\t\t\t\tstats.push(`latest(${field.name}) as ${field.name}`);\n\t\t\t\t\t} else if (field.content.merge_method == 'coalesce') {\n\t\t\t\t\t\tfieldSplit.push(`{adb_source}_${field.name} = ${field.name}`);\n\n\t\t\t\t\t\tlet mergeOrderArray = field.content.merge_order.split(',');\n\n\t\t\t\t\t\tlet statsMerge = mergeOrderArray.map((lookup) => {\n\t\t\t\t\t\t\treturn `latest(${lookup}_${field.name}) as ${lookup}_${field.name}`;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tstats = stats.concat(statsMerge);\n\n\t\t\t\t\t\tlet postEvalMerge = mergeOrderArray.map((lookup) => {\n\t\t\t\t\t\t\treturn `${lookup}_${field.name}`;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcoalesce.push(`${field.name} = coalesce(${postEvalMerge.join(', ')})`);\n\t\t\t\t\t}\n\t\t\t\t} else if (field.content.type == 'multivalue') {\n\t\t\t\t\tstats.push(`values(${field.name}) as ${field.name}`);\n\t\t\t\t\tmaxValues.push(`${field.name} = mvindex(${field.name},0,${parseInt(field.content.max_values) - 1})`);\n\t\t\t\t} else if (field.content.type == 'eval') {\n\t\t\t\t\tevalExp.push(`${field.name} = ${field.content.eval_expression}`);\n\t\t\t\t}\n\n\t\t\t\ttable.push(field.name);\n\t\t\t});\n\n\t\t\tlet search = '';\n\t\t\tif (caseSensitive.length) search += `\\n| eval ${caseSensitive.join(', ')}`;\n\t\t\tif (ignoreValues.length) search += `\\n| eval ${ignoreValues.join(', ')}`;\n\t\t\tif (keys.length) search += `\\n| eval _key = ${keys.join('.')}`;\n\t\t\tfor (k in fillnull) search += `\\n| fillnull ${fillnull[k].join(' ')} value=\"${k}\"`;\n\t\t\tif (fieldSplit.length) search += `\\n| eval ${fieldSplit.join(', ')}`;\n\t\t\tsearch += `\\n| stats ${stats.join(', ')} by _key`;\n\t\t\tif (maxValues.length) search += `\\n| eval ${maxValues.join(', ')}`;\n\t\t\tif (coalesce.length) search += `\\n| eval ${coalesce.join(', ')}`;\n\t\t\tif (evalExp.length) search += `\\n| eval ${evalExp.join(', ')}`;\n\t\t\tsearch += `\\n| table _key, ${table.join(', ')}`;\n\n\t\t\tconsole.log(search);\n\t\t});\n\t}\n\n\tbuildTables();\n\tmakeMergeSearch();\n});\n"]}