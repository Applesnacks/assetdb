{"version":3,"sources":["src/assetdb.js"],"names":["require","_","$","mvc","SearchManager","Modal","TextInput","RadioInput","SpinnerInput","MultiSelectInput","$el","ENDPOINT_BASE","SERVICE","createService","setConf","endpoint","data","path","post","err","results","promise","$button","appendTo","click","field","arguments","length","undefined","fieldNameInput","id","label","editable","name","value","keyFieldInput","choices","key_field","help","caseSensitiveInput","case_sensitive","ignoreValuesInput","ignore_values","fillnullInput","fillnull","typeInput","type","mergeMethodInput","merge_method","mergeOrderInput","merge_order","spinnerInput","max_values","evalExpInput","eval_expression","$form","append","getInput","getValue","hide","concat","show","mergeMethod","$input","on","e","editAddModal","wide","title","primaryButton","onRemove","Components","getInstance","getId","dispose","onPrimaryBtnClick","isEditable","test","this","setError","setBody","editAddField"],"mappings":"aAEAA,QAAQ,CACP,aACA,SACA,eACA,6BACA,sCACA,0CACA,2CACA,6CACA,iDACA,kCACE,SAAUC,EAAGC,EAAGC,EAAKC,EAAeC,EAAOC,EAAWC,EAAYC,EAAcC,GAClFC,IAAMR,EAAE,cACR,IAAMS,EAAgB,sCAChBC,EAAUT,EAAIU,gBAQpB,SAASC,EAAQC,EAAUC,GAC1B,IAAIC,EAAON,EAAgBI,EAE3B,OADeH,EAAQM,KAAKD,EAAMD,GAAM,SAAUG,EAAKC,OACvCC,UA8MjBC,QAAUpB,EAAE,6CACZoB,QAAQC,SAASb,KAEjBY,QAAQE,OAAM,YAtMd,WAAkC,IAAZC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACzBG,EAAiB,IAAIvB,EAAU,CAClCwB,GAAI,iBACJC,MAAO,aACPC,UAAUP,EAAMQ,KAChBC,MAAOT,EAAMQ,MAAQ,KAGlBE,EAAgB,IAAI5B,EAAW,CAClCuB,GAAI,gBACJC,MAAO,YACPK,QAAS,CACR,CAAEL,MAAO,MAAOG,MAAO,GACvB,CAAEH,MAAO,KAAMG,MAAO,IAEvBA,MAAOT,EAAMY,WAAa,EAC1BC,KAAM,qCAGHC,EAAqB,IAAIhC,EAAW,CACvCuB,GAAI,qBACJC,MAAO,iBACPK,QAAS,CACR,CAAEL,MAAO,MAAOG,MAAO,GACvB,CAAEH,MAAO,KAAMG,MAAO,IAEvBA,MAAOT,EAAMe,gBAAkB,EAC/BF,KAAM,mDAGHG,EAAoB,IAAInC,EAAU,CACrCwB,GAAI,oBACJC,MAAO,gBACPG,MAAOT,EAAMiB,eAAiB,yBAC9BJ,KAAM,0DAGHK,EAAgB,IAAIrC,EAAU,CACjCwB,GAAI,gBACJC,MAAO,YACPG,MAAOT,EAAMmB,UAAY,GACzBN,KAAM,qDAGHO,EAAY,IAAItC,EAAW,CAC9BuB,GAAI,YACJC,MAAO,OACPK,QAAS,CACR,CAAEL,MAAO,SAAUG,MAAO,UAC1B,CAAEH,MAAO,aAAcG,MAAO,cAC9B,CAAEH,MAAO,OAAQG,MAAO,SAEzBA,MAAOT,EAAMqB,MAAQ,SACrBR,KACC,gHAGES,EAAmB,IAAIxC,EAAW,CACrCuB,GAAI,mBACJC,MAAO,eACPK,QAAS,CACR,CAAEL,MAAO,SAAUG,MAAO,UAC1B,CAAEH,MAAO,WAAYG,MAAO,aAE7BA,MAAOT,EAAMuB,cAAgB,SAC7BV,KAAM,sFAGHW,EAAkB,IAAIxC,EAAiB,CAC1CqB,GAAI,kBACJC,MAAO,cACPK,QAAS,CACR,CAAEL,MAAO,QAASG,MAAO,SACzB,CAAEH,MAAO,QAASG,MAAO,SACzB,CAAEH,MAAO,QAASG,MAAO,UAE1BA,MAAOT,EAAMyB,aAAe,GAC5BZ,KACC,+GAGEa,EAAe,IAAI3C,EAAa,CACnCsB,GAAI,iBACJC,MAAO,aACPG,MAAOT,EAAM2B,YAAc,GAC3Bd,KAAM,0DAGHe,EAAe,IAAI/C,EAAU,CAChCwB,GAAI,eACJC,MAAO,kBACPG,MAAOT,EAAM6B,iBAAmB,GAChChB,KAAM,iEAGPiB,MAAQrD,EAAC,4VAQTA,EAAE,oBAAqBqD,OACrBC,OAAO3B,EAAe4B,YACtBD,OAAOrB,EAAcsB,YACrBD,OAAOjB,EAAmBkB,YAC1BD,OAAOf,EAAkBgB,YACzBD,OAAOb,EAAcc,YACrBD,OAAOX,EAAUY,YAEnBvD,EAAE,sBAAuBqD,OAAOC,OAAOT,EAAiBU,YAAYD,OAAOP,EAAgBQ,YAC3FvD,EAAE,0BAA2BqD,OAAOC,OAAOL,EAAaM,YACxDvD,EAAE,oBAAqBqD,OAAOC,OAAOH,EAAaI,YAElD,IAAIX,EAAOD,EAAUa,WACrBxD,EAAE,sBAAuBqD,OAAOI,OAChCzD,EAAC,gBAAA0D,OAAiBd,GAAQS,OAAOM,OAEjC,IAAIC,EAAcf,EAAiBW,WAC/BK,EAASd,EAAgBQ,WACd,UAAfK,EAA0BC,EAAOJ,OAASI,EAAOF,OAEjDhB,EAAUY,WAAWO,GAAG,UAAU,SAAUC,EAAGjD,GAC9Cd,EAAE,sBAAuBqD,OAAOI,OAChCzD,EAAC,gBAAA0D,OAAiB5C,EAAKkB,OAASqB,OAAOM,UAGxCd,EAAiBU,WAAWO,GAAG,UAAU,SAAUC,EAAGjD,GACrD,IAAI+C,EAASd,EAAgBQ,WACf,UAAdzC,EAAKkB,MAAoB6B,EAAOJ,OAASI,EAAOF,UAGjD,IAAIK,EAAe,IAAI7D,EAAM,CAC5B8D,MAAM,EACNC,MAAO3C,EAAQ,aAAe,YAC9B4C,cAAe,OACfC,SAAU,WACTnE,EAAIoE,WAAWC,YAAYvB,EAAgBwB,SAASC,WAErDC,kBAAmB,WAClB,IAAI9C,EAAe+C,cACJ,QACDC,KAAKhD,EAAe6B,YAFlC,CAQA,IAAI3C,EAAW,gBAEXC,EAAO,CACVqB,UAAWF,EAAcuB,WACzBlB,eAAgBD,EAAmBmB,WACnChB,cAAeD,EAAkBiB,WACjCd,SAAUD,EAAce,WACxBZ,KAAMD,EAAUa,WAChBV,aAAcD,EAAiBW,WAC/BR,YAAaD,EAAgBS,WAC7BN,WAAYD,EAAaO,WACzBJ,gBAAiBD,EAAaK,YAG3B7B,EAAe+C,aAClB5D,EAAKiB,KAAOJ,EAAe6B,WAE3B3C,GAAYc,EAAe6B,WAG5B5C,EAAQC,EAAUC,GAClB8D,KAAKnB,YA1BH9B,EAAekD,SAAS,sEA8B5Bb,EAAac,QAAQzB,OACrBW,EAAaL,OAwBboB","sourcesContent":["//# sourceURL=asset_base.js\n\nrequire([\n\t'underscore',\n\t'jquery',\n\t'splunkjs/mvc',\n\t'splunkjs/mvc/searchmanager',\n\t'/static/app/assetdb/js/modal.min.js',\n\t'/static/app/assetdb/js/textInput.min.js',\n\t'/static/app/assetdb/js/radioInput.min.js',\n\t'/static/app/assetdb/js/spinnerInput.min.js',\n\t'/static/app/assetdb/js/multiselectInput.min.js',\n\t'splunkjs/mvc/simplexml/ready!',\n], function (_, $, mvc, SearchManager, Modal, TextInput, RadioInput, SpinnerInput, MultiSelectInput) {\n\t$el = $('#ab_config');\n\tconst ENDPOINT_BASE = '/SERVICEsNS/nobody/assetdb/configs/';\n\tconst SERVICE = mvc.createService();\n\n\tfunction getConf(endpoint) {\n\t\tlet path = ENDPOINT_BASE + endpoint;\n\t\tlet deferred = SERVICE.get(path, {}, function (err, results) {});\n\t\treturn deferred.promise();\n\t}\n\n\tfunction setConf(endpoint, data) {\n\t\tlet path = ENDPOINT_BASE + endpoint;\n\t\tlet deferred = SERVICE.post(path, data, function (err, results) {});\n\t\treturn deferred.promise();\n\t}\n\n\tfunction delConf(endpoint) {\n\t\tlet path = ENDPOINT_BASE + endpoint;\n\t\tlet deferred = SERVICE.del(path, function (err, results) {\n\t\t\tdeferred.resolve(results);\n\t\t});\n\t\treturn deferred.promise();\n\t}\n\n\tfunction editAddField(field = {}) {\n\t\tlet fieldNameInput = new TextInput({\n\t\t\tid: 'inputFieldName',\n\t\t\tlabel: 'Field Name',\n\t\t\teditable: field.name ? false : true,\n\t\t\tvalue: field.name || '',\n\t\t});\n\n\t\tlet keyFieldInput = new RadioInput({\n\t\t\tid: 'inputKeyField',\n\t\t\tlabel: 'Key Field',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Yes', value: 1 },\n\t\t\t\t{ label: 'No', value: 0 },\n\t\t\t],\n\t\t\tvalue: field.key_field || 0,\n\t\t\thelp: 'Key fields define a unique asset',\n\t\t});\n\n\t\tlet caseSensitiveInput = new RadioInput({\n\t\t\tid: 'inputCaseSensitive',\n\t\t\tlabel: 'Case Sensitive',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Yes', value: 1 },\n\t\t\t\t{ label: 'No', value: 0 },\n\t\t\t],\n\t\t\tvalue: field.case_sensitive || 0,\n\t\t\thelp: 'If No, field values are converted to lowercase',\n\t\t});\n\n\t\tlet ignoreValuesInput = new TextInput({\n\t\t\tid: 'inputIgnoreValues',\n\t\t\tlabel: 'Ignore Values',\n\t\t\tvalue: field.ignore_values || 'null,unknown,undefined',\n\t\t\thelp: '[Optional] A comma separated list of values to ignore',\n\t\t});\n\n\t\tlet fillnullInput = new TextInput({\n\t\t\tid: 'inputFillnull',\n\t\t\tlabel: 'Fill Null',\n\t\t\tvalue: field.fillnull || '',\n\t\t\thelp: '[Optional] Fill null entries with a static value',\n\t\t});\n\n\t\tlet typeInput = new RadioInput({\n\t\t\tid: 'inputType',\n\t\t\tlabel: 'Type',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Single', value: 'single' },\n\t\t\t\t{ label: 'Multivalue', value: 'multivalue' },\n\t\t\t\t{ label: 'Eval', value: 'eval' },\n\t\t\t],\n\t\t\tvalue: field.type || 'single',\n\t\t\thelp:\n\t\t\t\t'Use a single value, keep all unique entries as a multivalue, or use an eval expression to define this field',\n\t\t});\n\n\t\tlet mergeMethodInput = new RadioInput({\n\t\t\tid: 'inputMergeMethod',\n\t\t\tlabel: 'Merge Method',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'Latest', value: 'latest' },\n\t\t\t\t{ label: 'Coalesce', value: 'coalesce' },\n\t\t\t],\n\t\t\tvalue: field.merge_method || 'latest',\n\t\t\thelp: 'Either take the most recent value or define a precedence based on the source data',\n\t\t});\n\n\t\tlet mergeOrderInput = new MultiSelectInput({\n\t\t\tid: 'inputMergeOrder',\n\t\t\tlabel: 'Merge Order',\n\t\t\tchoices: [\n\t\t\t\t{ label: 'test1', value: 'test1' },\n\t\t\t\t{ label: 'test2', value: 'test2' },\n\t\t\t\t{ label: 'test3', value: 'test3' },\n\t\t\t],\n\t\t\tvalue: field.merge_order || [],\n\t\t\thelp:\n\t\t\t\t'[Optional] Define the precedence of the source data; if no precendence is provided, a random order is used',\n\t\t});\n\n\t\tlet spinnerInput = new SpinnerInput({\n\t\t\tid: 'inputMaxValues',\n\t\t\tlabel: 'Max Values',\n\t\t\tvalue: field.max_values || 10,\n\t\t\thelp: 'The maximum number of values to store as a multivalue',\n\t\t});\n\n\t\tlet evalExpInput = new TextInput({\n\t\t\tid: 'inputEvalExp',\n\t\t\tlabel: 'Eval Expression',\n\t\t\tvalue: field.eval_expression || '',\n\t\t\thelp: 'An SPL eval expression, example: replace(field1, \"[^w]\", \"\")',\n\t\t});\n\n\t\t$form = $(`\n            <div class=\"form-horizontal\">\n                <div class=\"input-group-base\"></div>\n                <div class=\"input-group-toggle input-group-single\"></div>\n                <div class=\"input-group-toggle input-group-multivalue\"></div>\n                <div class=\"input-group-toggle input-group-eval\"></div>\n            </div>`);\n\n\t\t$('.input-group-base', $form)\n\t\t\t.append(fieldNameInput.getInput())\n\t\t\t.append(keyFieldInput.getInput())\n\t\t\t.append(caseSensitiveInput.getInput())\n\t\t\t.append(ignoreValuesInput.getInput())\n\t\t\t.append(fillnullInput.getInput())\n\t\t\t.append(typeInput.getInput());\n\n\t\t$('.input-group-single', $form).append(mergeMethodInput.getInput()).append(mergeOrderInput.getInput());\n\t\t$('.input-group-multivalue', $form).append(spinnerInput.getInput());\n\t\t$('.input-group-eval', $form).append(evalExpInput.getInput());\n\n\t\tlet type = typeInput.getValue();\n\t\t$('.input-group-toggle', $form).hide();\n\t\t$(`.input-group-${type}`, $form).show();\n\n\t\tlet mergeMethod = mergeMethodInput.getValue();\n\t\tlet $input = mergeOrderInput.getInput();\n\t\tmergeMethod == 'latest' ? $input.hide() : $input.show();\n\n\t\ttypeInput.getInput().on('change', function (e, data) {\n\t\t\t$('.input-group-toggle', $form).hide();\n\t\t\t$(`.input-group-${data.value}`, $form).show();\n\t\t});\n\n\t\tmergeMethodInput.getInput().on('change', function (e, data) {\n\t\t\tlet $input = mergeOrderInput.getInput();\n\t\t\tdata.value == 'latest' ? $input.hide() : $input.show();\n\t\t});\n\n\t\tlet editAddModal = new Modal({\n\t\t\twide: true,\n\t\t\ttitle: field ? 'Edit Field' : 'Add Field',\n\t\t\tprimaryButton: 'Save',\n\t\t\tonRemove: function () {\n\t\t\t\tmvc.Components.getInstance(mergeOrderInput.getId()).dispose();\n\t\t\t},\n\t\t\tonPrimaryBtnClick: function () {\n\t\t\t\tif (fieldNameInput.isEditable()) {\n\t\t\t\t\tlet pattern = /^\\w+$/;\n\t\t\t\t\tif (!pattern.test(fieldNameInput.getValue())) {\n\t\t\t\t\t\tfieldNameInput.setError('Field name can only use alphanumeric characters and underscores');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet endpoint = 'conf-assetdb/';\n\n\t\t\t\tlet data = {\n\t\t\t\t\tkey_field: keyFieldInput.getValue(),\n\t\t\t\t\tcase_sensitive: caseSensitiveInput.getValue(),\n\t\t\t\t\tignore_values: ignoreValuesInput.getValue(),\n\t\t\t\t\tfillnull: fillnullInput.getValue(),\n\t\t\t\t\ttype: typeInput.getValue(),\n\t\t\t\t\tmerge_method: mergeMethodInput.getValue(),\n\t\t\t\t\tmerge_order: mergeOrderInput.getValue(),\n\t\t\t\t\tmax_values: spinnerInput.getValue(),\n\t\t\t\t\teval_expression: evalExpInput.getValue(),\n\t\t\t\t};\n\n\t\t\t\tif (fieldNameInput.isEditable()) {\n\t\t\t\t\tdata.name = fieldNameInput.getValue();\n\t\t\t\t} else {\n\t\t\t\t\tendpoint += fieldNameInput.getValue();\n\t\t\t\t}\n\n\t\t\t\tsetConf(endpoint, data);\n\t\t\t\tthis.hide();\n\t\t\t},\n\t\t});\n\n\t\teditAddModal.setBody($form);\n\t\teditAddModal.show();\n\t}\n\n\tfunction deleteField(name) {\n\t\tlet deleteModal = new Modal({\n\t\t\twide: false,\n\t\t\ttitle: 'Delete Field',\n\t\t\tprimaryButton: 'Delete',\n\t\t\tonPrimaryBtnClick: function () {\n\t\t\t\tlet endpoint = 'conf-assetdb/' + name;\n\t\t\t\tdelConf(endpoint);\n\t\t\t\tthis.hide();\n\t\t\t},\n\t\t});\n\n\t\tlet $body = $(`<div>Are you sure you want to delete field ${name}?</div>`);\n\t\tdeleteModal.setBody($body);\n\t\tdeleteModal.show();\n\t}\n\n\t$button = $('<button class=\"button\">Click Me!</button>');\n\t$button.appendTo($el);\n\n\t$button.click(function () {\n\t\teditAddField();\n\t});\n});\n"]}