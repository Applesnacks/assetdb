"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){var e=_toPrimitive(t,"string");return"symbol"===_typeof(e)?e:String(e)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,e||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}define((function(t,e,n){var o=t("underscore"),r=t("jquery"),i=t("splunkjs/mvc/simpleform/input/multiselect");return function(){function t(e){_classCallCheck(this,t);var n=o.escape(e.id),l=o.escape(e.label);if(this.$input=r('\n                <div id="'.concat(n,'" class="control-group shared-controls-controlgroup control-group-default">\n                    <label class="control-label" for="control-key">').concat(l,'</label>\n                    <div role="group" class="controls controls-join">\n                        <div class="control control-default"></div>\n                    </div>\n                </div>')),this.id=e.id,console.log(e.value),this.splunkInput=new i({id:e.id,el:r(".control",this.$input),choices:e.choices,value:e.value}).render(),r(".splunk-multidropdown",this.$input).css("margin",0),r(".splunk-multidropdown > div > div",this.$input).css("width","100%"),r(".splunk-choice-input-message",this.$input).remove(),e.help){var u=r('<div class="help-block">'.concat(e.help,"</div>"));this.$input.append(u)}}return _createClass(t,[{key:"getValue",value:function(){return this.splunkInput.val().join(",")}},{key:"getInput",value:function(){return this.$input}},{key:"getId",value:function(){return this.id}}]),t}()}));