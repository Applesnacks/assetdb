"use strict";require(["underscore","jquery","splunkjs/mvc","splunkjs/mvc/searchmanager","/static/app/assetdb/js/modal.min.js","/static/app/assetdb/js/textInput.min.js","/static/app/assetdb/js/radioInput.min.js","/static/app/assetdb/js/spinnerInput.min.js","/static/app/assetdb/js/multiselectInput.min.js","splunkjs/mvc/simplexml/ready!"],(function(e,l,a,t,n,i,u,s,o){$el=l("#ab_config");var p="/SERVICEsNS/nobody/assetdb/configs/",r=a.createService();function d(e,l){var a=p+e;return r.post(a,l,(function(e,l){})).promise()}$button=l('<button class="button">Click Me!</button>'),$button.appendTo($el),$button.click((function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new i({id:"inputFieldName",label:"Field Name",editable:!e.name,value:e.name||""}),p=new u({id:"inputKeyField",label:"Key Field",choices:[{label:"Yes",value:1},{label:"No",value:0}],value:e.key_field||0,help:"Key fields define a unique asset"}),r=new u({id:"inputCaseSensitive",label:"Case Sensitive",choices:[{label:"Yes",value:1},{label:"No",value:0}],value:e.case_sensitive||0,help:"If No, field values are converted to lowercase"}),v=new i({id:"inputIgnoreValues",label:"Ignore Values",value:e.ignore_values||"null,unknown,undefined",help:"[Optional] A comma separated list of values to ignore"}),g=new i({id:"inputFillnull",label:"Fill Null",value:e.fillnull||"",help:"[Optional] Fill null entries with a static value"}),c=new u({id:"inputType",label:"Type",choices:[{label:"Single",value:"single"},{label:"Multivalue",value:"multivalue"},{label:"Eval",value:"eval"}],value:e.type||"single",help:"Use a single value, keep all unique entries as a multivalue, or use an eval expression to define this field"}),m=new u({id:"inputMergeMethod",label:"Merge Method",choices:[{label:"Latest",value:"latest"},{label:"Coalesce",value:"coalesce"}],value:e.merge_method||"latest",help:"Either take the most recent value or define a precedence based on the source data"}),b=new o({id:"inputMergeOrder",label:"Merge Order",choices:[{label:"test1",value:"test1"},{label:"test2",value:"test2"},{label:"test3",value:"test3"}],value:e.merge_order||[],help:"[Optional] Define the precedence of the source data; if no precendence is provided, a random order is used"}),h=new s({id:"inputMaxValues",label:"Max Values",value:e.max_values||10,help:"The maximum number of values to store as a multivalue"}),f=new i({id:"inputEvalExp",label:"Eval Expression",value:e.eval_expression||"",help:'An SPL eval expression, example: replace(field1, "[^w]", "")'});$form=l('\n            <div class="form-horizontal">\n                <div class="input-group-base"></div>\n                <div class="input-group-toggle input-group-single"></div>\n                <div class="input-group-toggle input-group-multivalue"></div>\n                <div class="input-group-toggle input-group-eval"></div>\n            </div>'),l(".input-group-base",$form).append(t.getInput()).append(p.getInput()).append(r.getInput()).append(v.getInput()).append(g.getInput()).append(c.getInput()),l(".input-group-single",$form).append(m.getInput()).append(b.getInput()),l(".input-group-multivalue",$form).append(h.getInput()),l(".input-group-eval",$form).append(f.getInput());var I=c.getValue();l(".input-group-toggle",$form).hide(),l(".input-group-".concat(I),$form).show();var w=m.getValue(),V=b.getInput();"latest"==w?V.hide():V.show(),c.getInput().on("change",(function(e,a){l(".input-group-toggle",$form).hide(),l(".input-group-".concat(a.value),$form).show()})),m.getInput().on("change",(function(e,l){var a=b.getInput();"latest"==l.value?a.hide():a.show()}));var y=new n({wide:!0,title:e?"Edit Field":"Add Field",primaryButton:"Save",onRemove:function(){a.Components.getInstance(b.getId()).dispose()},onPrimaryBtnClick:function(){if(!t.isEditable()||/^\w+$/.test(t.getValue())){var e="conf-assetdb/",l={key_field:p.getValue(),case_sensitive:r.getValue(),ignore_values:v.getValue(),fillnull:g.getValue(),type:c.getValue(),merge_method:m.getValue(),merge_order:b.getValue(),max_values:h.getValue(),eval_expression:f.getValue()};t.isEditable()?l.name=t.getValue():e+=t.getValue(),d(e,l),this.hide()}else t.setError("Field name can only use alphanumeric characters and underscores")}});y.setBody($form),y.show()}()}))}));