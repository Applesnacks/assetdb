"use strict";

//# sourceURL=asset_base.js
require(["underscore", "jquery", "splunkjs/mvc", "splunkjs/mvc/searchmanager", "/static/app/assetdb/js/modal.js", "/static/app/assetdb/js/textInput.js", "/static/app/assetdb/js/radioInput.js", "/static/app/assetdb/js/spinnerInput.js", "/static/app/assetdb/js/multiselectInput.js", "splunkjs/mvc/simplexml/ready!"], function (_, $, mvc, SearchManager, Modal, TextInput, RadioInput, SpinnerInput, MultiSelectInput) {
  $el = $("#ab_config");
  var ENDPOINT_BASE = '/servicesNS/nobody/assetdb/configs/';
  var service = mvc.createService();

  function getConf(service, endpoint) {
    var path = ENDPOINT_BASE + endpoint;
    var deferred = service.get(path, {}, function (err, results) {});
    return deferred.promise();
  }

  function setConf(service, endpoint, data) {
    var path = ENDPOINT_BASE + endpoint;
    var deferred = service.post(path, data, function (err, results) {});
    return deferred.promise();
  }

  function delConf(service, endpoint) {
    var path = ENDPOINT_BASE + endpoint;
    var deferred = service.del(path, function (err, results) {
      deferred.resolve(results);
    });
    return deferred.promise();
  }

  function editAddField() {
    var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var fieldNameInput = new TextInput({
      id: "inputFieldName",
      label: "Field Name",
      editable: field.name ? false : true,
      value: field.name || ""
    });
    var keyFieldInput = new RadioInput({
      id: "inputKeyField",
      label: "Key Field",
      choices: [{
        label: "Yes",
        value: 1
      }, {
        label: "No",
        value: 0
      }],
      value: field.key_field || 0,
      help: "Key fields define a unique asset"
    });
    var caseSensitiveInput = new RadioInput({
      id: "inputCaseSensitive",
      label: "Case Sensitive",
      choices: [{
        label: "Yes",
        value: 1
      }, {
        label: "No",
        value: 0
      }],
      value: field.case_sensitive || 0,
      help: "If No, field values are converted to lowercase"
    });
    var ignoreValuesInput = new TextInput({
      id: "inputIgnoreValues",
      label: "Ignore Values",
      value: field.ignore_values || "null,unknown,undefined",
      help: "[Optional] A comma separated list of values to ignore"
    });
    var fillnullInput = new TextInput({
      id: "inputFillnull",
      label: "Fill Null",
      value: field.fillnull || "",
      help: "[Optional] Fill null entries with a static value"
    });
    var typeInput = new RadioInput({
      id: "inputType",
      label: "Type",
      choices: [{
        label: "Single",
        value: "single"
      }, {
        label: "Multivalue",
        value: "multivalue"
      }, {
        label: "Eval",
        value: "eval"
      }],
      value: field.type || "single",
      help: "Use a single value, keep all unique entries as a multivalue, or use an eval expression to define this field"
    });
    var mergeMethodInput = new RadioInput({
      id: "inputMergeMethod",
      label: "Merge Method",
      choices: [{
        label: "Latest",
        value: "latest"
      }, {
        label: "Coalesce",
        value: "coalesce"
      }],
      value: field.merge_method || "latest",
      help: "Either take the most recent value or define a precedence based on the source data"
    });
    var mergeOrderInput = new MultiSelectInput({
      id: "inputMergeOrder",
      label: "Merge Order",
      choices: [{
        label: "test1",
        value: "test1"
      }, {
        label: "test2",
        value: "test2"
      }, {
        label: "test3",
        value: "test3"
      }],
      value: field.merge_order || [],
      help: "[Optional] Define the precedence of the source data; if no precendence is provided, a random order is used"
    });
    var spinnerInput = new SpinnerInput({
      id: "inputMaxValues",
      label: "Max Values",
      value: field.max_values || 10,
      help: "The maximum number of values to store as a multivalue"
    });
    var evalExpInput = new TextInput({
      id: "inputEvalExp",
      label: "Eval Expression",
      value: field.eval_expression || "",
      help: 'An SPL eval expression, example: replace(field1, "[^w]", "")'
    }); // Form

    $form = $("\n            <div class=\"form-horizontal\">\n                <div class=\"input-group-base\"></div>\n                <div class=\"input-group-toggle input-group-single\"></div>\n                <div class=\"input-group-toggle input-group-multivalue\"></div>\n                <div class=\"input-group-toggle input-group-eval\"></div>\n            </div>");
    $(".input-group-base", $form).append(fieldNameInput.getInput()).append(keyFieldInput.getInput()).append(caseSensitiveInput.getInput()).append(ignoreValuesInput.getInput()).append(fillnullInput.getInput()).append(typeInput.getInput());
    $(".input-group-single", $form).append(mergeMethodInput.getInput()).append(mergeOrderInput.getInput());
    $(".input-group-multivalue", $form).append(spinnerInput.getInput());
    $(".input-group-eval", $form).append(evalExpInput.getInput()); // Form section visibility

    var type = typeInput.getValue();
    $(".input-group-toggle", $form).hide();
    $(".input-group-".concat(type), $form).show();
    var mergeMethod = mergeMethodInput.getValue();
    var $input = mergeOrderInput.getInput();
    mergeMethod == "latest" ? $input.hide() : $input.show();
    typeInput.getInput().on("change", function (e, data) {
      $(".input-group-toggle", $form).hide();
      $(".input-group-".concat(data.value), $form).show();
    });
    mergeMethodInput.getInput().on("change", function (e, data) {
      var $input = mergeOrderInput.getInput();
      data.value == "latest" ? $input.hide() : $input.show();
    }); // Modal

    var editAddModal = new Modal({
      wide: true,
      title: field ? "Edit Field" : "Add Field",
      primaryButton: "Save",
      onRemove: function onRemove() {
        console.log(mergeOrderInput.getId());
        mvc.Components.getInstance(mergeOrderInput.getId()).dispose();
      },
      onPrimaryBtnClick: function onPrimaryBtnClick() {
        var endpoint = 'conf-assetdb/';
        var data = {
          key_field: keyFieldInput.getValue(),
          case_sensitive: caseSensitiveInput.getValue(),
          ignore_values: ignoreValuesInput.getValue(),
          fillnull: fillnullInput.getValue(),
          type: typeInput.getValue(),
          merge_method: mergeMethodInput.getValue(),
          merge_order: mergeMethodInput.getValue(),
          max_values: spinnerInput.getValue(),
          eval_expression: evalExpInput.getValue()
        };

        if (fieldNameInput.isEditable()) {
          data.name = fieldNameInput.getValue();
        } else {
          endpoint += fieldNameInput.getValue();
        }

        setConf(service, endpoint, data);
      }
    }); // Set form body and show

    editAddModal.setBody($form);
    editAddModal.show();
  }

  $button = $('<button class="button">Click Me!</button>');
  $button.appendTo($el);
  $button.click(function () {
    editAddField();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,