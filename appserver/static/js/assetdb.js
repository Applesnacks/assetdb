"use strict";

//# sourceURL=asset_base.js
require(['underscore', 'jquery', 'splunkjs/mvc', 'splunkjs/mvc/searchmanager', '/static/app/assetdb/js/modal.js', '/static/app/assetdb/js/textInput.js', '/static/app/assetdb/js/radioInput.js', '/static/app/assetdb/js/spinnerInput.js', '/static/app/assetdb/js/multiselectInput.js', 'splunkjs/mvc/simplexml/ready!'], function (_, $, mvc, SearchManager, Modal, TextInput, RadioInput, SpinnerInput, MultiSelectInput) {
  $el = $('#ab_config');
  var ENDPOINT_BASE = '/SERVICEsNS/nobody/assetdb/configs/';
  var SERVICE = mvc.createService();

  function getConf(endpoint) {
    var path = ENDPOINT_BASE + endpoint;
    var deferred = SERVICE.get(path, {}, function (err, results) {});
    return deferred.promise();
  }

  function setConf(endpoint, data) {
    var path = ENDPOINT_BASE + endpoint;
    var deferred = SERVICE.post(path, data, function (err, results) {});
    return deferred.promise();
  }

  function delConf(endpoint) {
    var path = ENDPOINT_BASE + endpoint;
    var deferred = SERVICE.del(path, function (err, results) {
      deferred.resolve(results);
    });
    return deferred.promise();
  }

  function editAddField() {
    var field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var fieldNameInput = new TextInput({
      id: 'inputFieldName',
      label: 'Field Name',
      editable: field.name ? false : true,
      value: field.name || ''
    });
    var keyFieldInput = new RadioInput({
      id: 'inputKeyField',
      label: 'Key Field',
      choices: [{
        label: 'Yes',
        value: 1
      }, {
        label: 'No',
        value: 0
      }],
      value: field.key_field || 0,
      help: 'Key fields define a unique asset'
    });
    var caseSensitiveInput = new RadioInput({
      id: 'inputCaseSensitive',
      label: 'Case Sensitive',
      choices: [{
        label: 'Yes',
        value: 1
      }, {
        label: 'No',
        value: 0
      }],
      value: field.case_sensitive || 0,
      help: 'If No, field values are converted to lowercase'
    });
    var ignoreValuesInput = new TextInput({
      id: 'inputIgnoreValues',
      label: 'Ignore Values',
      value: field.ignore_values || 'null,unknown,undefined',
      help: '[Optional] A comma separated list of values to ignore'
    });
    var fillnullInput = new TextInput({
      id: 'inputFillnull',
      label: 'Fill Null',
      value: field.fillnull || '',
      help: '[Optional] Fill null entries with a static value'
    });
    var typeInput = new RadioInput({
      id: 'inputType',
      label: 'Type',
      choices: [{
        label: 'Single',
        value: 'single'
      }, {
        label: 'Multivalue',
        value: 'multivalue'
      }, {
        label: 'Eval',
        value: 'eval'
      }],
      value: field.type || 'single',
      help: 'Use a single value, keep all unique entries as a multivalue, or use an eval expression to define this field'
    });
    var mergeMethodInput = new RadioInput({
      id: 'inputMergeMethod',
      label: 'Merge Method',
      choices: [{
        label: 'Latest',
        value: 'latest'
      }, {
        label: 'Coalesce',
        value: 'coalesce'
      }],
      value: field.merge_method || 'latest',
      help: 'Either take the most recent value or define a precedence based on the source data'
    });
    var mergeOrderInput = new MultiSelectInput({
      id: 'inputMergeOrder',
      label: 'Merge Order',
      choices: [{
        label: 'test1',
        value: 'test1'
      }, {
        label: 'test2',
        value: 'test2'
      }, {
        label: 'test3',
        value: 'test3'
      }],
      value: field.merge_order || [],
      help: '[Optional] Define the precedence of the source data; if no precendence is provided, a random order is used'
    });
    var spinnerInput = new SpinnerInput({
      id: 'inputMaxValues',
      label: 'Max Values',
      value: field.max_values || 10,
      help: 'The maximum number of values to store as a multivalue'
    });
    var evalExpInput = new TextInput({
      id: 'inputEvalExp',
      label: 'Eval Expression',
      value: field.eval_expression || '',
      help: 'An SPL eval expression, example: replace(field1, "[^w]", "")'
    });
    $form = $("\n            <div class=\"form-horizontal\">\n                <div class=\"input-group-base\"></div>\n                <div class=\"input-group-toggle input-group-single\"></div>\n                <div class=\"input-group-toggle input-group-multivalue\"></div>\n                <div class=\"input-group-toggle input-group-eval\"></div>\n            </div>");
    $('.input-group-base', $form).append(fieldNameInput.getInput()).append(keyFieldInput.getInput()).append(caseSensitiveInput.getInput()).append(ignoreValuesInput.getInput()).append(fillnullInput.getInput()).append(typeInput.getInput());
    $('.input-group-single', $form).append(mergeMethodInput.getInput()).append(mergeOrderInput.getInput());
    $('.input-group-multivalue', $form).append(spinnerInput.getInput());
    $('.input-group-eval', $form).append(evalExpInput.getInput());
    var type = typeInput.getValue();
    $('.input-group-toggle', $form).hide();
    $(".input-group-".concat(type), $form).show();
    var mergeMethod = mergeMethodInput.getValue();
    var $input = mergeOrderInput.getInput();
    mergeMethod == 'latest' ? $input.hide() : $input.show();
    typeInput.getInput().on('change', function (e, data) {
      $('.input-group-toggle', $form).hide();
      $(".input-group-".concat(data.value), $form).show();
    });
    mergeMethodInput.getInput().on('change', function (e, data) {
      var $input = mergeOrderInput.getInput();
      data.value == 'latest' ? $input.hide() : $input.show();
    });
    var editAddModal = new Modal({
      wide: true,
      title: field ? 'Edit Field' : 'Add Field',
      primaryButton: 'Save',
      onRemove: function onRemove() {
        mvc.Components.getInstance(mergeOrderInput.getId()).dispose();
      },
      onPrimaryBtnClick: function onPrimaryBtnClick() {
        if (fieldNameInput.isEditable()) {
          var pattern = /^\w+$/;

          if (!pattern.test(fieldNameInput.getValue())) {
            fieldNameInput.setError('Field name can only use alphanumeric characters and underscores');
            return;
          }
        }

        var endpoint = 'conf-assetdb/';
        var data = {
          key_field: keyFieldInput.getValue(),
          case_sensitive: caseSensitiveInput.getValue(),
          ignore_values: ignoreValuesInput.getValue(),
          fillnull: fillnullInput.getValue(),
          type: typeInput.getValue(),
          merge_method: mergeMethodInput.getValue(),
          merge_order: mergeOrderInput.getValue(),
          max_values: spinnerInput.getValue(),
          eval_expression: evalExpInput.getValue()
        };

        if (fieldNameInput.isEditable()) {
          data.name = fieldNameInput.getValue();
        } else {
          endpoint += fieldNameInput.getValue();
        }

        setConf(endpoint, data);
        this.hide();
      }
    });
    editAddModal.setBody($form);
    editAddModal.show();
  }

  function deleteField(name) {
    var deleteModal = new Modal({
      wide: false,
      title: 'Delete Field',
      primaryButton: 'Delete',
      onPrimaryBtnClick: function onPrimaryBtnClick() {
        var endpoint = 'conf-assetdb/' + name;
        delConf(endpoint);
        this.hide();
      }
    });
    var $body = $("<div>Are you sure you want to delete field ".concat(name, "?</div>"));
    deleteModal.setBody($body);
    deleteModal.show();
  }

  $button = $('<button class="button">Click Me!</button>');
  $button.appendTo($el);
  $button.click(function () {
    editAddField();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hc3NldGRiLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJfIiwiJCIsIm12YyIsIlNlYXJjaE1hbmFnZXIiLCJNb2RhbCIsIlRleHRJbnB1dCIsIlJhZGlvSW5wdXQiLCJTcGlubmVySW5wdXQiLCJNdWx0aVNlbGVjdElucHV0IiwiJGVsIiwiRU5EUE9JTlRfQkFTRSIsIlNFUlZJQ0UiLCJjcmVhdGVTZXJ2aWNlIiwiZ2V0Q29uZiIsImVuZHBvaW50IiwicGF0aCIsImRlZmVycmVkIiwiZ2V0IiwiZXJyIiwicmVzdWx0cyIsInByb21pc2UiLCJzZXRDb25mIiwiZGF0YSIsInBvc3QiLCJkZWxDb25mIiwiZGVsIiwicmVzb2x2ZSIsImVkaXRBZGRGaWVsZCIsImZpZWxkIiwiZmllbGROYW1lSW5wdXQiLCJpZCIsImxhYmVsIiwiZWRpdGFibGUiLCJuYW1lIiwidmFsdWUiLCJrZXlGaWVsZElucHV0IiwiY2hvaWNlcyIsImtleV9maWVsZCIsImhlbHAiLCJjYXNlU2Vuc2l0aXZlSW5wdXQiLCJjYXNlX3NlbnNpdGl2ZSIsImlnbm9yZVZhbHVlc0lucHV0IiwiaWdub3JlX3ZhbHVlcyIsImZpbGxudWxsSW5wdXQiLCJmaWxsbnVsbCIsInR5cGVJbnB1dCIsInR5cGUiLCJtZXJnZU1ldGhvZElucHV0IiwibWVyZ2VfbWV0aG9kIiwibWVyZ2VPcmRlcklucHV0IiwibWVyZ2Vfb3JkZXIiLCJzcGlubmVySW5wdXQiLCJtYXhfdmFsdWVzIiwiZXZhbEV4cElucHV0IiwiZXZhbF9leHByZXNzaW9uIiwiJGZvcm0iLCJhcHBlbmQiLCJnZXRJbnB1dCIsImdldFZhbHVlIiwiaGlkZSIsInNob3ciLCJtZXJnZU1ldGhvZCIsIiRpbnB1dCIsIm9uIiwiZSIsImVkaXRBZGRNb2RhbCIsIndpZGUiLCJ0aXRsZSIsInByaW1hcnlCdXR0b24iLCJvblJlbW92ZSIsIkNvbXBvbmVudHMiLCJnZXRJbnN0YW5jZSIsImdldElkIiwiZGlzcG9zZSIsIm9uUHJpbWFyeUJ0bkNsaWNrIiwiaXNFZGl0YWJsZSIsInBhdHRlcm4iLCJ0ZXN0Iiwic2V0RXJyb3IiLCJzZXRCb2R5IiwiZGVsZXRlRmllbGQiLCJkZWxldGVNb2RhbCIsIiRib2R5IiwiJGJ1dHRvbiIsImFwcGVuZFRvIiwiY2xpY2siXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFFQUEsT0FBTyxDQUFDLENBQ1AsWUFETyxFQUVQLFFBRk8sRUFHUCxjQUhPLEVBSVAsNEJBSk8sRUFLUCxpQ0FMTyxFQU1QLHFDQU5PLEVBT1Asc0NBUE8sRUFRUCx3Q0FSTyxFQVNQLDRDQVRPLEVBVVAsK0JBVk8sQ0FBRCxFQVdKLFVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQkMsR0FBaEIsRUFBcUJDLGFBQXJCLEVBQW9DQyxLQUFwQyxFQUEyQ0MsU0FBM0MsRUFBc0RDLFVBQXRELEVBQWtFQyxZQUFsRSxFQUFnRkMsZ0JBQWhGLEVBQWtHO0FBQ3BHQyxFQUFBQSxHQUFHLEdBQUdSLENBQUMsQ0FBQyxZQUFELENBQVA7QUFDQSxNQUFNUyxhQUFhLEdBQUcscUNBQXRCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHVCxHQUFHLENBQUNVLGFBQUosRUFBaEI7O0FBRUEsV0FBU0MsT0FBVCxDQUFpQkMsUUFBakIsRUFBMkI7QUFDMUIsUUFBSUMsSUFBSSxHQUFHTCxhQUFhLEdBQUdJLFFBQTNCO0FBQ0EsUUFBSUUsUUFBUSxHQUFHTCxPQUFPLENBQUNNLEdBQVIsQ0FBWUYsSUFBWixFQUFrQixFQUFsQixFQUFzQixVQUFVRyxHQUFWLEVBQWVDLE9BQWYsRUFBd0IsQ0FBRSxDQUFoRCxDQUFmO0FBQ0EsV0FBT0gsUUFBUSxDQUFDSSxPQUFULEVBQVA7QUFDQTs7QUFFRCxXQUFTQyxPQUFULENBQWlCUCxRQUFqQixFQUEyQlEsSUFBM0IsRUFBaUM7QUFDaEMsUUFBSVAsSUFBSSxHQUFHTCxhQUFhLEdBQUdJLFFBQTNCO0FBQ0EsUUFBSUUsUUFBUSxHQUFHTCxPQUFPLENBQUNZLElBQVIsQ0FBYVIsSUFBYixFQUFtQk8sSUFBbkIsRUFBeUIsVUFBVUosR0FB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QUFSMEIsS0FBVixDQUFsQjtBQVdBLFFBQUl1QixLQUFLLEdBQUdqRixDQUFDLHNEQUErQ2dDLElBQS9DLGFBQWI7QUFDQWdELElBQUFBLFdBQVcsQ0FBQ0YsT0FBWixDQUFvQkcsS0FBcEI7QUFDQUQsSUFBQUEsV0FBVyxDQUFDckIsSUFBWjtBQUNBOztBQUVEdUIsRUFBQUEsT0FBTyxHQUFHbEYsQ0FBQyxDQUFDLDJDQUFELENBQVg7QUFDQWtGLEVBQUFBLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQjNFLEdBQWpCO0FBRUEwRSxFQUFBQSxPQUFPLENBQUNFLEtBQVIsQ0FBYyxZQUFZO0FBQ3pCMUQsSUFBQUEsWUFBWTtBQUNaLEdBRkQ7QUFHQSxDQTdPTSxDQUFQIiwic291cmNlc0NvbnRlbnQiOlsiLy8jIHNvdXJjZVVSTD1hc3NldF9iYXNlLmpzXG5cbnJlcXVpcmUoW1xuXHQndW5kZXJzY29yZScsXG5cdCdqcXVlcnknLFxuXHQnc3BsdW5ranMvbXZjJyxcblx0J3NwbHVua2pzL212Yy9zZWFyY2htYW5hZ2VyJyxcblx0Jy9zdGF0aWMvYXBwL2Fzc2V0ZGIvanMvbW9kYWwuanMnLFxuXHQnL3N0YXRpYy9hcHAvYXNzZXRkYi9qcy90ZXh0SW5wdXQuanMnLFxuXHQnL3N0YXRpYy9hcHAvYXNzZXRkYi9qcy9yYWRpb0lucHV0LmpzJyxcblx0Jy9zdGF0aWMvYXBwL2Fzc2V0ZGIvanMvc3Bpbm5lcklucHV0LmpzJyxcblx0Jy9zdGF0aWMvYXBwL2Fzc2V0ZGIvanMvbXVsdGlzZWxlY3RJbnB1dC5qcycsXG5cdCdzcGx1bmtqcy9tdmMvc2ltcGxleG1sL3JlYWR5IScsXG5dLCBmdW5jdGlvbiAoXywgJCwgbXZjLCBTZWFyY2hNYW5hZ2VyLCBNb2RhbCwgVGV4dElucHV0LCBSYWRpb0lucHV0LCBTcGlubmVySW5wdXQsIE11bHRpU2VsZWN0SW5wdXQpIHtcblx0JGVsID0gJCgnI2FiX2NvbmZpZycpO1xuXHRjb25zdCBFTkRQT0lOVF9CQVNFID0gJy9TRVJWSUNFc05TL25vYm9keS9hc3NldGRiL2NvbmZpZ3MvJztcblx0Y29uc3QgU0VSVklDRSA9IG12Yy5jcmVhdGVTZXJ2aWNlKCk7XG5cblx0ZnVuY3Rpb24gZ2V0Q29uZihlbmRwb2ludCkge1xuXHRcdGxldCBwYXRoID0gRU5EUE9JTlRfQkFTRSArIGVuZHBvaW50O1xuXHRcdGxldCBkZWZlcnJlZCA9IFNFUlZJQ0UuZ2V0KHBhdGgsIHt9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7fSk7XG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNldENvbmYoZW5kcG9pbnQsIGRhdGEpIHtcblx0XHRsZXQgcGF0aCA9IEVORFBPSU5UX0JBU0UgKyBlbmRwb2ludDtcblx0XHRsZXQgZGVmZXJyZWQgPSBTRVJWSUNFLnBvc3QocGF0aCwgZGF0YSwgZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge30pO1xuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG5cdH1cblxuXHRmdW5jdGlvbiBkZWxDb25mKGVuZHBvaW50KSB7XG5cdFx0bGV0IHBhdGggPSBFTkRQT0lOVF9CQVNFICsgZW5kcG9pbnQ7XG5cdFx0bGV0IGRlZmVycmVkID0gU0VSVklDRS5kZWwocGF0aCwgZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZWRpdEFkZEZpZWxkKGZpZWxkID0ge30pIHtcblx0XHRsZXQgZmllbGROYW1lSW5wdXQgPSBuZXcgVGV4dElucHV0KHtcblx0XHRcdGlkOiAnaW5wdXRGaWVsZE5hbWUnLFxuXHRcdFx0bGFiZWw6ICdGaWVsZCBOYW1lJyxcblx0XHRcdGVkaXRhYmxlOiBmaWVsZC5uYW1lID8gZmFsc2UgOiB0cnVlLFxuXHRcdFx0dmFsdWU6IGZpZWxkLm5hbWUgfHwgJycsXG5cdFx0fSk7XG5cblx0XHRsZXQga2V5RmllbGRJbnB1dCA9IG5ldyBSYWRpb0lucHV0KHtcblx0XHRcdGlkOiAnaW5wdXRLZXlGaWVsZCcsXG5cdFx0XHRsYWJlbDogJ0tleSBGaWVsZCcsXG5cdFx0XHRjaG9pY2VzOiBbXG5cdFx0XHRcdHsgbGFiZWw6ICdZZXMnLCB2YWx1ZTogMSB9LFxuXHRcdFx0XHR7IGxhYmVsOiAnTm8nLCB2YWx1ZTogMCB9LFxuXHRcdFx0XSxcblx0XHRcdHZhbHVlOiBmaWVsZC5rZXlfZmllbGQgfHwgMCxcblx0XHRcdGhlbHA6ICdLZXkgZmllbGRzIGRlZmluZSBhIHVuaXF1ZSBhc3NldCcsXG5cdFx0fSk7XG5cblx0XHRsZXQgY2FzZVNlbnNpdGl2ZUlucHV0ID0gbmV3IFJhZGlvSW5wdXQoe1xuXHRcdFx0aWQ6ICdpbnB1dENhc2VTZW5zaXRpdmUnLFxuXHRcdFx0bGFiZWw6ICdDYXNlIFNlbnNpdGl2ZScsXG5cdFx0XHRjaG9pY2VzOiBbXG5cdFx0XHRcdHsgbGFiZWw6ICdZZXMnLCB2YWx1ZTogMSB9LFxuXHRcdFx0XHR7IGxhYmVsOiAnTm8nLCB2YWx1ZTogMCB9LFxuXHRcdFx0XSxcblx0XHRcdHZhbHVlOiBmaWVsZC5jYXNlX3NlbnNpdGl2ZSB8fCAwLFxuXHRcdFx0aGVscDogJ0lmIE5vLCBmaWVsZCB2YWx1ZXMgYXJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UnLFxuXHRcdH0pO1xuXG5cdFx0bGV0IGlnbm9yZVZhbHVlc0lucHV0ID0gbmV3IFRleHRJbnB1dCh7XG5cdFx0XHRpZDogJ2lucHV0SWdub3JlVmFsdWVzJyxcblx0XHRcdGxhYmVsOiAnSWdub3JlIFZhbHVlcycsXG5cdFx0XHR2YWx1ZTogZmllbGQuaWdub3JlX3ZhbHVlcyB8fCAnbnVsbCx1bmtub3duLHVuZGVmaW5lZCcsXG5cdFx0XHRoZWxwOiAnW09wdGlvbmFsXSBBIGNvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIHZhbHVlcyB0byBpZ25vcmUnLFxuXHRcdH0pO1xuXG5cdFx0bGV0IGZpbGxudWxsSW5wdXQgPSBuZXcgVGV4dElucHV0KHtcblx0XHRcdGlkOiAnaW5wdXRGaWxsbnVsbCcsXG5cdFx0XHRsYWJlbDogJ0ZpbGwgTnVsbCcsXG5cdFx0XHR2YWx1ZTogZmllbGQuZmlsbG51bGwgfHwgJycsXG5cdFx0XHRoZWxwOiAnW09wdGlvbmFsXSBGaWxsIG51bGwgZW50cmllcyB3aXRoIGEgc3RhdGljIHZhbHVlJyxcblx0XHR9KTtcblxuXHRcdGxldCB0eXBlSW5wdXQgPSBuZXcgUmFkaW9JbnB1dCh7XG5cdFx0XHRpZDogJ2lucHV0VHlwZScsXG5cdFx0XHRsYWJlbDogJ1R5cGUnLFxuXHRcdFx0Y2hvaWNlczogW1xuXHRcdFx0XHR7IGxhYmVsOiAnU2luZ2xlJywgdmFsdWU6ICdzaW5nbGUnIH0sXG5cdFx0XHRcdHsgbGFiZWw6ICdNdWx0aXZhbHVlJywgdmFsdWU6ICdtdWx0aXZhbHVlJyB9LFxuXHRcdFx0XHR7IGxhYmVsOiAnRXZhbCcsIHZhbHVlOiAnZXZhbCcgfSxcblx0XHRcdF0sXG5cdFx0XHR2YWx1ZTogZmllbGQudHlwZSB8fCAnc2luZ2xlJyxcblx0XHRcdGhlbHA6XG5cdFx0XHRcdCdVc2UgYSBzaW5nbGUgdmFsdWUsIGtlZXAgYWxsIHVuaXF1ZSBlbnRyaWVzIGFzIGEgbXVsdGl2YWx1ZSwgb3IgdXNlIGFuIGV2YWwgZXhwcmVzc2lvbiB0byBkZWZpbmUgdGhpcyBmaWVsZCcsXG5cdFx0fSk7XG5cblx0XHRsZXQgbWVyZ2VNZXRob2RJbnB1dCA9IG5ldyBSYWRpb0lucHV0KHtcblx0XHRcdGlkOiAnaW5wdXRNZXJnZU1ldGhvZCcsXG5cdFx0XHRsYWJlbDogJ01lcmdlIE1ldGhvZCcsXG5cdFx0XHRjaG9pY2VzOiBbXG5cdFx0XHRcdHsgbGFiZWw6ICdMYXRlc3QnLCB2YWx1ZTogJ2xhdGVzdCcgfSxcblx0XHRcdFx0eyBsYWJlbDogJ0NvYWxlc2NlJywgdmFsdWU6ICdjb2FsZXNjZScgfSxcblx0XHRcdF0sXG5cdFx0XHR2YWx1ZTogZmllbGQubWVyZ2VfbWV0aG9kIHx8ICdsYXRlc3QnLFxuXHRcdFx0aGVscDogJ0VpdGhlciB0YWtlIHRoZSBtb3N0IHJlY2VudCB2YWx1ZSBvciBkZWZpbmUgYSBwcmVjZWRlbmNlIGJhc2VkIG9uIHRoZSBzb3VyY2UgZGF0YScsXG5cdFx0fSk7XG5cblx0XHRsZXQgbWVyZ2VPcmRlcklucHV0ID0gbmV3IE11bHRpU2VsZWN0SW5wdXQoe1xuXHRcdFx0aWQ6ICdpbnB1dE1lcmdlT3JkZXInLFxuXHRcdFx0bGFiZWw6ICdNZXJnZSBPcmRlcicsXG5cdFx0XHRjaG9pY2VzOiBbXG5cdFx0XHRcdHsgbGFiZWw6ICd0ZXN0MScsIHZhbHVlOiAndGVzdDEnIH0sXG5cdFx0XHRcdHsgbGFiZWw6ICd0ZXN0MicsIHZhbHVlOiAndGVzdDInIH0sXG5cdFx0XHRcdHsgbGFiZWw6ICd0ZXN0MycsIHZhbHVlOiAndGVzdDMnIH0sXG5cdFx0XHRdLFxuXHRcdFx0dmFsdWU6IGZpZWxkLm1lcmdlX29yZGVyIHx8IFtdLFxuXHRcdFx0aGVscDpcblx0XHRcdFx0J1tPcHRpb25hbF0gRGVmaW5lIHRoZSBwcmVjZWRlbmNlIG9mIHRoZSBzb3VyY2UgZGF0YTsgaWYgbm8gcHJlY2VuZGVuY2UgaXMgcHJvdmlkZWQsIGEgcmFuZG9tIG9yZGVyIGlzIHVzZWQnLFxuXHRcdH0pO1xuXG5cdFx0bGV0IHNwaW5uZXJJbnB1dCA9IG5ldyBTcGlubmVySW5wdXQoe1xuXHRcdFx0aWQ6ICdpbnB1dE1heFZhbHVlcycsXG5cdFx0XHRsYWJlbDogJ01heCBWYWx1ZXMnLFxuXHRcdFx0dmFsdWU6IGZpZWxkLm1heF92YWx1ZXMgfHwgMTAsXG5cdFx0XHRoZWxwOiAnVGhlIG1heGltdW0gbnVtYmVyIG9mIHZhbHVlcyB0byBzdG9yZSBhcyBhIG11bHRpdmFsdWUnLFxuXHRcdH0pO1xuXG5cdFx0bGV0IGV2YWxFeHBJbnB1dCA9IG5ldyBUZXh0SW5wdXQoe1xuXHRcdFx0aWQ6ICdpbnB1dEV2YWxFeHAnLFxuXHRcdFx0bGFiZWw6ICdFdmFsIEV4cHJlc3Npb24nLFxuXHRcdFx0dmFsdWU6IGZpZWxkLmV2YWxfZXhwcmVzc2lvbiB8fCAnJyxcblx0XHRcdGhlbHA6ICdBbiBTUEwgZXZhbCBleHByZXNzaW9uLCBleGFtcGxlOiByZXBsYWNlKGZpZWxkMSwgXCJbXnddXCIsIFwiXCIpJyxcblx0XHR9KTtcblxuXHRcdCRmb3JtID0gJChgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWJhc2VcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtdG9nZ2xlIGlucHV0LWdyb3VwLXNpbmdsZVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC10b2dnbGUgaW5wdXQtZ3JvdXAtbXVsdGl2YWx1ZVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC10b2dnbGUgaW5wdXQtZ3JvdXAtZXZhbFwiPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YCk7XG5cblx0XHQkKCcuaW5wdXQtZ3JvdXAtYmFzZScsICRmb3JtKVxuXHRcdFx0LmFwcGVuZChmaWVsZE5hbWVJbnB1dC5nZXRJbnB1dCgpKVxuXHRcdFx0LmFwcGVuZChrZXlGaWVsZElucHV0LmdldElucHV0KCkpXG5cdFx0XHQuYXBwZW5kKGNhc2VTZW5zaXRpdmVJbnB1dC5nZXRJbnB1dCgpKVxuXHRcdFx0LmFwcGVuZChpZ25vcmVWYWx1ZXNJbnB1dC5nZXRJbnB1dCgpKVxuXHRcdFx0LmFwcGVuZChmaWxsbnVsbElucHV0LmdldElucHV0KCkpXG5cdFx0XHQuYXBwZW5kKHR5cGVJbnB1dC5nZXRJbnB1dCgpKTtcblxuXHRcdCQoJy5pbnB1dC1ncm91cC1zaW5nbGUnLCAkZm9ybSkuYXBwZW5kKG1lcmdlTWV0aG9kSW5wdXQuZ2V0SW5wdXQoKSkuYXBwZW5kKG1lcmdlT3JkZXJJbnB1dC5nZXRJbnB1dCgpKTtcblx0XHQkKCcuaW5wdXQtZ3JvdXAtbXVsdGl2YWx1ZScsICRmb3JtKS5hcHBlbmQoc3Bpbm5lcklucHV0LmdldElucHV0KCkpO1xuXHRcdCQoJy5pbnB1dC1ncm91cC1ldmFsJywgJGZvcm0pLmFwcGVuZChldmFsRXhwSW5wdXQuZ2V0SW5wdXQoKSk7XG5cblx0XHRsZXQgdHlwZSA9IHR5cGVJbnB1dC5nZXRWYWx1ZSgpO1xuXHRcdCQoJy5pbnB1dC1ncm91cC10b2dnbGUnLCAkZm9ybSkuaGlkZSgpO1xuXHRcdCQoYC5pbnB1dC1ncm91cC0ke3R5cGV9YCwgJGZvcm0pLnNob3coKTtcblxuXHRcdGxldCBtZXJnZU1ldGhvZCA9IG1lcmdlTWV0aG9kSW5wdXQuZ2V0VmFsdWUoKTtcblx0XHRsZXQgJGlucHV0ID0gbWVyZ2VPcmRlcklucHV0LmdldElucHV0KCk7XG5cdFx0bWVyZ2VNZXRob2QgPT0gJ2xhdGVzdCcgPyAkaW5wdXQuaGlkZSgpIDogJGlucHV0LnNob3coKTtcblxuXHRcdHR5cGVJbnB1dC5nZXRJbnB1dCgpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSwgZGF0YSkge1xuXHRcdFx0JCgnLmlucHV0LWdyb3VwLXRvZ2dsZScsICRmb3JtKS5oaWRlKCk7XG5cdFx0XHQkKGAuaW5wdXQtZ3JvdXAtJHtkYXRhLnZhbHVlfWAsICRmb3JtKS5zaG93KCk7XG5cdFx0fSk7XG5cblx0XHRtZXJnZU1ldGhvZElucHV0LmdldElucHV0KCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG5cdFx0XHRsZXQgJGlucHV0ID0gbWVyZ2VPcmRlcklucHV0LmdldElucHV0KCk7XG5cdFx0XHRkYXRhLnZhbHVlID09ICdsYXRlc3QnID8gJGlucHV0LmhpZGUoKSA6ICRpbnB1dC5zaG93KCk7XG5cdFx0fSk7XG5cblx0XHRsZXQgZWRpdEFkZE1vZGFsID0gbmV3IE1vZGFsKHtcblx0XHRcdHdpZGU6IHRydWUsXG5cdFx0XHR0aXRsZTogZmllbGQgPyAnRWRpdCBGaWVsZCcgOiAnQWRkIEZpZWxkJyxcblx0XHRcdHByaW1hcnlCdXR0b246ICdTYXZlJyxcblx0XHRcdG9uUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdG12Yy5Db21wb25lbnRzLmdldEluc3RhbmNlKG1lcmdlT3JkZXJJbnB1dC5nZXRJZCgpKS5kaXNwb3NlKCk7XG5cdFx0XHR9LFxuXHRcdFx0b25QcmltYXJ5QnRuQ2xpY2s6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKGZpZWxkTmFtZUlucHV0LmlzRWRpdGFibGUoKSkge1xuXHRcdFx0XHRcdGxldCBwYXR0ZXJuID0gL15cXHcrJC87XG5cdFx0XHRcdFx0aWYgKCFwYXR0ZXJuLnRlc3QoZmllbGROYW1lSW5wdXQuZ2V0VmFsdWUoKSkpIHtcblx0XHRcdFx0XHRcdGZpZWxkTmFtZUlucHV0LnNldEVycm9yKCdGaWVsZCBuYW1lIGNhbiBvbmx5IHVzZSBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdW5kZXJzY29yZXMnKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgZW5kcG9pbnQgPSAnY29uZi1hc3NldGRiLyc7XG5cblx0XHRcdFx0bGV0IGRhdGEgPSB7XG5cdFx0XHRcdFx0a2V5X2ZpZWxkOiBrZXlGaWVsZElucHV0LmdldFZhbHVlKCksXG5cdFx0XHRcdFx0Y2FzZV9zZW5zaXRpdmU6IGNhc2VTZW5zaXRpdmVJbnB1dC5nZXRWYWx1ZSgpLFxuXHRcdFx0XHRcdGlnbm9yZV92YWx1ZXM6IGlnbm9yZVZhbHVlc0lucHV0LmdldFZhbHVlKCksXG5cdFx0XHRcdFx0ZmlsbG51bGw6IGZpbGxudWxsSW5wdXQuZ2V0VmFsdWUoKSxcblx0XHRcdFx0XHR0eXBlOiB0eXBlSW5wdXQuZ2V0VmFsdWUoKSxcblx0XHRcdFx0XHRtZXJnZV9tZXRob2Q6IG1lcmdlTWV0aG9kSW5wdXQuZ2V0VmFsdWUoKSxcblx0XHRcdFx0XHRtZXJnZV9vcmRlcjogbWVyZ2VPcmRlcklucHV0LmdldFZhbHVlKCksXG5cdFx0XHRcdFx0bWF4X3ZhbHVlczogc3Bpbm5lcklucHV0LmdldFZhbHVlKCksXG5cdFx0XHRcdFx0ZXZhbF9leHByZXNzaW9uOiBldmFsRXhwSW5wdXQuZ2V0VmFsdWUoKSxcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpZiAoZmllbGROYW1lSW5wdXQuaXNFZGl0YWJsZSgpKSB7XG5cdFx0XHRcdFx0ZGF0YS5uYW1lID0gZmllbGROYW1lSW5wdXQuZ2V0VmFsdWUoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbmRwb2ludCArPSBmaWVsZE5hbWVJbnB1dC5nZXRWYWx1ZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2V0Q29uZihlbmRwb2ludCwgZGF0YSk7XG5cdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdGVkaXRBZGRNb2RhbC5zZXRCb2R5KCRmb3JtKTtcblx0XHRlZGl0QWRkTW9kYWwuc2hvdygpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVsZXRlRmllbGQobmFtZSkge1xuXHRcdGxldCBkZWxldGVNb2RhbCA9IG5ldyBNb2RhbCh7XG5cdFx0XHR3aWRlOiBmYWxzZSxcblx0XHRcdHRpdGxlOiAnRGVsZXRlIEZpZWxkJyxcblx0XHRcdHByaW1hcnlCdXR0b246ICdEZWxldGUnLFxuXHRcdFx0b25QcmltYXJ5QnRuQ2xpY2s6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0bGV0IGVuZHBvaW50ID0gJ2NvbmYtYXNzZXRkYi8nICsgbmFtZTtcblx0XHRcdFx0ZGVsQ29uZihlbmRwb2ludCk7XG5cdFx0XHRcdHRoaXMuaGlkZSgpO1xuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdGxldCAkYm9keSA9ICQoYDxkaXY+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSBmaWVsZCAke25hbWV9PzwvZGl2PmApO1xuXHRcdGRlbGV0ZU1vZGFsLnNldEJvZHkoJGJvZHkpO1xuXHRcdGRlbGV0ZU1vZGFsLnNob3coKTtcblx0fVxuXG5cdCRidXR0b24gPSAkKCc8YnV0dG9uIGNsYXNzPVwiYnV0dG9uXCI+Q2xpY2sgTWUhPC9idXR0b24+Jyk7XG5cdCRidXR0b24uYXBwZW5kVG8oJGVsKTtcblxuXHQkYnV0dG9uLmNsaWNrKGZ1bmN0aW9uICgpIHtcblx0XHRlZGl0QWRkRmllbGQoKTtcblx0fSk7XG59KTtcbiJdfQ==