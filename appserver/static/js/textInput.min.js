"use strict";function _typeof(e){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_typeof(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,_toPropertyKey(r.key),r)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(e,t){if("object"!==_typeof(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}define((function(e,t,n){var r=e("underscore"),o=e("jquery");return function(){function e(t){_classCallCheck(this,e);var n=r.escape(t.id),i=r.escape(t.label),a=r.escape(t.value);if(this.$input=o('\n                <div id="'.concat(n,'" class="control-group shared-controls-controlgroup control-group-default">\n                    <label class="control-label" for="').concat(n,'">').concat(i,'</label>\n                    <div role="group" class="controls controls-join">\n                        <div class="control shared-controls-textcontrol control-default">\n                            ').concat(t.editable||null==t.editable?'<input type="text" name="'.concat(n,'" aria-label="Input" class="" value="').concat(a,'" autocomplete="off">'):'<span class="uneditable-input" data-role="uneditable-input">'.concat(a,"</span>"),"\n                        </div>\n                    </div>\n                </div>")),this.editable=!(!t.editable&&null!=t.editable),t.help){var l=o('<div class="help-block">'.concat(t.help,"</div>"));this.$input.append(l)}}return _createClass(e,[{key:"getValue",value:function(){return this.editable?o("input",this.$input).val():o("span",this.$input).text()}},{key:"getInput",value:function(){return this.$input}},{key:"isEditable",value:function(){return this.editable}},{key:"validate",value:function(e){return e.test(this.getValue())}},{key:"isEmpty",value:function(){return""==this.getValue()||null==this.getValue()}},{key:"setError",value:function(e){o(".error-message",this.$input).remove();var t=o('<div class="error-message help-block">'.concat(e,"</div>"));this.$input.append(t)}},{key:"clearError",value:function(){o(".error-message",this.$input).remove()}}]),e}()}));