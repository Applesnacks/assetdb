"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}define((function(e,t,n){var a=e("underscore"),l=e("jquery");return function(){function e(t){_classCallCheck(this,e);var n=a.escape(t.id),i=a.escape(t.label);if(this.$input=l('\n                <div id="'.concat(n,'" class="control-group shared-controls-controlgroup control-group-default">\n                    <label class="control-label" for="').concat(n,'">').concat(i,'</label>\n                    <div role="group" class="controls controls-join">\n                        <div class="control shared-controls-textcontrol control-default">\n                            ').concat(t.editable||null==t.editable?'<input type="text" name="'.concat(n,'" aria-label="Input" class="" value="').concat(t.value,'" autocomplete="off">'):'<span class="uneditable-input" data-role="uneditable-input">'.concat(t.value,"</span>"),"\n                        </div>\n                    </div>\n                </div>")),this.editable=!(!t.editable&&null!=t.editable),t.help){var o=l('<div class="help-block">'.concat(t.help,"</div>"));this.$input.append(o)}}return _createClass(e,[{key:"getValue",value:function(){return this.editable?l("input",this.$input).val():l("span",this.$input).text()}},{key:"getInput",value:function(){return this.$input}},{key:"isEditable",value:function(){return this.editable}},{key:"setError",value:function(e){l(".error-block",this.$input).remove();var t=l('<div class="error-block">'.concat(e,"</div>"));this.$input.append(t)}}]),e}()}));